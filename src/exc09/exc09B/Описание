                    Более практический пример.
    Несмотря на то что в приведенных примерах демонстрируется механизм применения
методов по умолчанию, в них все же не показана практическая польза от такого ново-
введения. С этой целью вернемся к интерфейсу IntStack. Допустим, что интерфейс
IntStack широко применяется во многих программах и что в нем требуется вве­сти метод,
очищающий стек, чтобы подготовить его к повторному использованию. Следовательно, интер-
фейс IntStack требуется дополнить новыми функциональ­ ными возможностями, но не нарушая
уже существующий код. Прежде это было просто невозможно, но благодаря внедрению методов
по умолчанию это совсем не трудно сделать теперь.

Пример:
    В данном примере метод clear() по умолчанию выводит сообщение о том, что он не реали-
зован. И это вполне допустимо, поскольку метод clear() нельзя вызвать из любого уже суще-
ствующего класса, реализующего интерфейс IntStack, если он не был определен в предыдущей
версии интерфейса IntStack. Но метод clear() может быть реализован в новом классе вместе
с интерфейсом IntStack. Более того, новую реализацию метода clear() потребуется определить
лишь в том случае, если он используется. Следовательно, метод по умолчанию предоставляет
возможность сделать следующее:

    • изящно расширить интерфейс со временем;

    • предоставить дополнительные функциональные возможности , исключая замещающую реализа-
      цию в классе, если эти функциональные возможности не требуются.

    Следует также иметь в виду, что в реальном коде метод clear() должен генерировать исклю-
чение, а не выводить сообщение.
